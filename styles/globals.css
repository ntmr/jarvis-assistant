// components/ChatApp.js
import { useState, useEffect } from 'react';
import MessageBubble from './MessageBubble';
import AssistantAvatar from './AssistantAvatar';
import AssistantIndicator from './AssistantIndicator';
import ChatInput from './ChatInput';

export default function ChatApp() {
  const [messages, setMessages] = useState([]);
  const [isAssistantThinking, setIsAssistantThinking] = useState(false);

  const speak = (text) => {
    const synth = window.speechSynthesis;
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    synth.speak(utterance);
  };

  const sendMessage = async (text) => {
    const newMessages = [...messages, { sender: 'user', text }];
    setMessages(newMessages);
    setIsAssistantThinking(true);

    try {
      const res = await fetch('/api/deepseek', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt: text })
      });

      const data = await res.json();
      const reply = data.response?.trim() || 'Нет ответа';
      setMessages((prev) => [...prev, { sender: 'assistant', text: reply }]);
      speak(reply);
    } catch (err) {
      console.error(err);
    } finally {
      setIsAssistantThinking(false);
    }
  };

  return (
    <div className="chat-wrapper">
      <AssistantIndicator isActive={isAssistantThinking} />
      <AssistantAvatar />
      <div className="chat-box">
        {messages.map((msg, index) => (
          <MessageBubble key={index} message={msg} />
        ))}
      </div>
      <ChatInput onSend={sendMessage} />
    </div>
  );
}
